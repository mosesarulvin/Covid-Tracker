{"version":3,"sources":["InfoBox.js","Table.js","util.js","Map.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","Table","countries","map","country","numeral","format","casesTypeColor","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","Map","casesType","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","isViolet","e","todayCases","todayRecovered","isRed","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd3ab254.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card,CardContent, Typography} from '@material-ui/core'\r\nimport './InfoBox.css'\r\n\r\nfunction InfoBox({title, cases, active, total, ...props }) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && `infoBox--${title}`}`}\r\n        >\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" className=\"infoBox__title\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases  \r\n                ${active && `infoBox__cases--${title}`}\r\n                `}>\r\n                    {cases}\r\n                </h2>\r\n                <Typography color=\"textSecondary\" className=\"infoBox__total\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './Table.css'\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country,cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>\r\n                            {numeral(cases).format(\"0,0\")}\r\n                        </strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColor = {\r\n    cases:{\r\n        hex: \"#026fe6\",\r\n        multiplier: 800,\r\n    },\r\n    recovered:{\r\n        hex: \"#269742\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths:{\r\n        hex: \"#fe073a\",\r\n        multiplier: 2000,\r\n    },\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a,b) =>(a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : null\r\n\r\nexport const showDataOnMap = (data, casesType='cases') => (\r\n    data.map(country => (\r\n        <Circle \r\n        center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity = {0.4}\r\n        color = {casesTypeColor[casesType].hex}\r\n        fillColor = {casesTypeColor[casesType].hex}\r\n        radius = {\r\n            Math.sqrt(country[casesType]) * casesTypeColor[casesType].multiplier\r\n        }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\" \r\n                        style={{backgroundImage: `url(${country.countryInfo.flag})`}}/>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n            </Circle>\r\n    ))\r\n);","import React from 'react'\r\nimport './Map.css'\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\"\r\nimport { showDataOnMap } from \"./util\"\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer \r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution= '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'  />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from \"numeral\"\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode :\"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes:[\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },    \r\n            },\r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks:{\r\n                    callback: function (value, index, values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases){\r\n        if(lastDataPoint){\r\n            let newDataPoint ={\r\n                x:  date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType = \"cases\", ...props}) {\r\n    const [data, setData] = useState({}); \r\n    const borderColor = {\r\n        cases:\"#026fe6\",\r\n        recovered : \"#269742\",\r\n        deaths : \"#fe073a\",\r\n    };\r\n    \r\n    const backgroundColor = {\r\n        cases:\"#026fe626\",\r\n        recovered : \"#2697422b\",\r\n        deaths : \"#fe073a29\",\r\n    };\r\n\r\n    useEffect(()=> {\r\n        const fetchData = async () =>{\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\r\n            .then(response=>response.json())\r\n            .then(data=> {\r\n                let chartData = buildChartData(data , casesType);\r\n                setData(chartData);\r\n            });\r\n        };\r\n        fetchData();\r\n    },[casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && ( \r\n            <Line \r\n                options = {options}\r\n                data = {{\r\n                    datasets: [\r\n                        {\r\n                            backgroundColor: backgroundColor[casesType],\r\n                            borderColor: borderColor[casesType],\r\n                            data:data, \r\n                        },\r\n                    ],\r\n                }} \r\n            />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React,{ useState, useEffect } from 'react';\r\nimport { MenuItem, Select, FormControl, Card, CardContent } from '@material-ui/core';\r\nimport InfoBox from './InfoBox';\r\nimport Table from './Table';\r\nimport Map from './Map';\r\nimport { sortData, prettyPrintStat } from './util';\r\nimport LineGraph from './LineGraph';\r\nimport './App.css';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nfunction App() {\r\n\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n    .then((response)=>response.json())\r\n    .then((data)=>{\r\n      setCountryInfo(data);\r\n    });\r\n  },[]);\r\n\r\n  useEffect(()=> {\r\n    const getCountriesData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n      .then((response)=> response.json())\r\n      .then((data)=>{\r\n        const countries = data.map((country)=>({\r\n          name : country.country,\r\n          value : country.countryInfo.iso2,\r\n        }));\r\n        const sortedData = sortData(data);\r\n        setTableData(sortedData);\r\n        setMapCountries(data);\r\n        setCountries(countries);\r\n\r\n      }); \r\n    };\r\n    getCountriesData();\r\n  },[]);\r\n\r\nconst onCountryChange = async (event) => {\r\n  const countryCode = event.target.value;\r\n  const url = \r\n    countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\"\r\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n  await fetch(url)\r\n  .then(response => response.json())\r\n  .then(data => {\r\n    setCountry(countryCode);\r\n    setCountryInfo(data);\r\n    console.log(data.countryInfo.long);\r\n    setMapCenter([data.countryInfo.lat , data.countryInfo.long]);\r\n    setMapZoom(4);\r\n  });\r\n}\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n      <div className=\"app__header\"> \r\n      <h1>COVID-19 TRACKER</h1>\r\n      <div className=\"app__dropdown\">\r\n      <FormControl  >\r\n        <Select\r\n          variant=\"outlined\"\r\n          onChange={onCountryChange}\r\n          value={country}>\r\n            <MenuItem value=\"worldwide\">World Wide</MenuItem>\r\n          {countries.map(\r\n            country => (\r\n              <MenuItem value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n        </Select>\r\n      </FormControl>      \r\n      </div>\r\n      </div>\r\n\r\n      <div className=\"app__stats\">\r\n          <InfoBox \r\n          isViolet\r\n          active = {casesType === \"cases\" }\r\n          onClick={e => setCasesType(\"cases\")}\r\n          title=\"Cases\" \r\n          cases={prettyPrintStat(countryInfo.todayCases)} \r\n          total={prettyPrintStat(countryInfo.cases)}/>\r\n\r\n          <InfoBox \r\n          active = {casesType === \"recovered\" }\r\n          onClick={e => setCasesType(\"recovered\")}\r\n          title=\"Recovered\" \r\n          cases={prettyPrintStat(countryInfo.todayRecovered)} \r\n          total={prettyPrintStat(countryInfo.recovered)}/> \r\n          \r\n          <InfoBox\r\n          isRed \r\n          active = {casesType === \"deaths\" }\r\n          onClick={e => setCasesType(\"deaths\")}\r\n          title=\"Deaths\" \r\n          cases={prettyPrintStat(countryInfo.todayDeaths)} \r\n          total={prettyPrintStat(countryInfo.deaths)}/> \r\n\r\n      </div>\r\n\r\n      <Map \r\n      casesType={casesType}\r\n      countries={mapCountries} \r\n      center={mapCenter} \r\n      zoom={mapZoom} />\r\n \r\n      </div>\r\n      <Card className=\"app__right\">\r\n        <CardContent className=\"app__table\">\r\n          <h3>\r\n            Live Cases by Country\r\n          </h3>\r\n          <Table countries={tableData}/>\r\n        </CardContent>\r\n          <CardContent className=\"app__lineGraph\">\r\n          <h3 className=\"app__graphTitle\">\r\n            Worldwide new {casesType}\r\n          </h3>  \r\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\r\n          </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}